Index: app/src/main/java/com/lx/api/BasicApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.api\n\n\nimport android.util.Log\nimport com.lx.data.*\nimport okhttp3.Interceptor\nimport okhttp3.MultipartBody\nimport okhttp3.OkHttpClient\nimport okhttp3.logging.HttpLoggingInterceptor\nimport retrofit2.Call\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.*\nimport java.lang.Exception\nimport java.security.SecureRandom\nimport java.security.cert.CertificateException\nimport java.security.cert.X509Certificate\nimport java.text.SimpleDateFormat\nimport java.util.*\nimport java.util.concurrent.TimeUnit\nimport javax.net.ssl.*\nimport kotlin.collections.HashMap\n\n/**\n * 웹서버 요청/응답을 처리하기 위한 기본 API\n */\ninterface BasicApi {\n\n    /**\n     * member 멤버 DB\n     */\n\n    /**\n     * POST 방식으로 멤버 로그인 요청\n     */\n\n    @FormUrlEncoded\n    @POST(\"red/memberRead\")\n    fun memberRead(\n        @Field(\"requestCode\") requestCode: String,\n        @Field(\"id\") id: String,\n        @Field(\"pw\") pw: String\n    ): Call<MemberListResponse>\n\n    /**\n     * POST 방식으로 멤버 회원가입 요청\n     */\n\n    @FormUrlEncoded\n    @POST(\"red/memberAdd\")\n    fun memberAdd(\n        @Field(\"requestCode\") requestCode: String,\n        @Field(\"id\") id: String,\n        @Field(\"pw\") pw: String,\n        @Field(\"name\") name: String,\n        @Field(\"birth\") birth: String,\n        @Field(\"gender\") gender: String,\n        @Field(\"phone\") phone: String\n    ): Call<MemberListResponse>\n\n    /**\n     * POST 방식으로 멤버 정보수정 요청\n     */\n\n    @FormUrlEncoded\n    @POST(\"red/memberUpdate\")\n    fun memberUpdate(\n        @Field(\"requestCode\") requestCode: String,\n        @Field(\"id\") id: String,\n        @Field(\"pw\") pw: String,\n        @Field(\"birth\") birth: String,\n        @Field(\"gender\") gender: String,\n        @Field(\"phone\") phone: String,\n        @Field(\"height\") height: String,\n        @Field(\"weight\") weight: String,\n        @Field(\"emernum\") emernum: String,\n        @Field(\"medicine\") medicine: String,\n        @Field(\"disease\") disease: String,\n        @Field(\"bloodtype\") bloodtype: String,\n        @Field(\"certificate\") certificate: String,\n        @Field(\"others\") others: String,\n    ): Call<MemberListResponse>\n\n    /**\n     * POST 방식으로 아이디 중복체크 요청\n     */\n\n    @FormUrlEncoded\n    @POST(\"red/memberIdcheck\")\n    fun postMemberCheckId(\n        @Field(\"requestCode\") requestCode: String,\n        @Field(\"id\") id: String\n    ): Call<MemberListResponse>\n\n    /**\n     * 내위치에서 구조신호 보내기 + 구조신호 리스트 추가\n     */\n\n    @FormUrlEncoded\n    @POST(\"red/sendMyAreaAdd\")\n    fun sendMyArea(\n        @Field(\"requestCode\") requestCode: String,\n        @Field(\"id\") id: String,\n        @Field(\"lat\") lat: String,\n        @Field(\"lng\") lng: String\n    ): Call<SendMyAreaResponse>\n\n\n    /**\n     * GET 방식으로 게시판 리스트 보기\n     */\n\n    @GET(\"red/communityList\")\n    fun getCommunityList(\n        @Query(\"requestCode\") requestCode: String\n    ): Call<CommunityResponse>\n\n\n    /**\n     * 게시판 추가\n     */\n\n    @FormUrlEncoded\n    @POST(\"red/communityAdd\")\n    fun addPost(\n        @Field(\"requestCode\") requestCode: String,\n        @Field(\"id\") id: String,\n        @Field(\"title\") title: String,\n        @Field(\"picture\") picture: String,\n        @Field(\"content\") content: String,\n        @Field(\"area\") area: String\n    ): Call<CommunityResponse>\n\n\n\n\n    /**\n     * 파일 업로드 요청\n     */\n\n    @Multipart\n    @POST(\"/farm/upload\")\n    fun uploadFile(\n        @Part file: MultipartBody.Part,\n        @Part(value=\"params\", encoding=\"UTF-8\") params: HashMap<String,String> = hashMapOf()\n    ): Call<FileUploadResponse>\n\n}\n\nclass BasicClient {\n\n    companion object {\n        const val TAG = \"BasicClient\"\n\n        private var instance : BasicApi? = null\n\n        val api: BasicApi\n            get() {\n                return getInstance()\n            }\n\n        @Synchronized\n        fun getInstance(): BasicApi {\n            if (instance == null)\n                instance = create()\n            return instance as BasicApi\n        }\n\n        // 프로토콜\n        private const val PROTOCOL = \"http\"\n\n        // 기본 URL\n        private const val BASE_URL = \"http://172.168.10.33:8001/\"\n\n        // 헤더 속성\n        private const val CLIENT_ID = \"\"\n        private const val CLIENT_SECRET = \"\"\n        var userId:String = \"\"\n\n        fun create(): BasicApi {\n            val httpLoggingInterceptor = HttpLoggingInterceptor()\n            httpLoggingInterceptor.level = HttpLoggingInterceptor.Level.BODY\n\n            val headerInterceptor = Interceptor {\n                val request = it.request()\n                    .newBuilder()\n                    .addHeader(\"X-Client-Id\", CLIENT_ID)\n                    .addHeader(\"X-Client-Secret\", CLIENT_SECRET)\n                    .addHeader(\"X-Client-UserId\", userId)\n                    .build()\n                return@Interceptor it.proceed(request)\n            }\n\n            val clientBuilder = OkHttpClient.Builder()\n\n            if (PROTOCOL == \"https\") {\n\n                val x509TrustManager: X509TrustManager = object : X509TrustManager {\n                    override fun getAcceptedIssuers(): Array<X509Certificate> {\n                        val x509Certificates = arrayOf<X509Certificate>()\n                        return x509Certificates\n                    }\n\n                    @Throws(CertificateException::class)\n                    override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) {\n                        Log.d(TAG, \": authType: $authType\")\n                    }\n\n                    @Throws(CertificateException::class)\n                    override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) {\n                        Log.d(TAG, \": authType: $authType\")\n                    }\n                }\n\n                try {\n                    val sslContext = SSLContext.getInstance(\"TLS\")\n                    sslContext.init(null, trustAllCerts, SecureRandom())\n                    val sslSocketFactory = sslContext.socketFactory\n                    clientBuilder.sslSocketFactory(sslSocketFactory, x509TrustManager)\n                } catch (e: Exception) {\n                    e.printStackTrace()\n                }\n\n                clientBuilder.hostnameVerifier(RelaxedHostNameVerifier())\n\n            }\n\n            clientBuilder.addInterceptor(headerInterceptor)\n            clientBuilder.addInterceptor(httpLoggingInterceptor)\n            clientBuilder.callTimeout(60, TimeUnit.SECONDS)       // 호출 타임아웃 시간 설정 60초\n            clientBuilder.connectTimeout(60, TimeUnit.SECONDS)    // 연결 타임아웃 시간 설정 60초\n            clientBuilder.readTimeout(60, TimeUnit.SECONDS)\n            clientBuilder.writeTimeout(60, TimeUnit.SECONDS)\n\n            val client = clientBuilder.build()\n\n            return Retrofit.Builder()\n                .baseUrl(BASE_URL)\n                .client(client)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n                .create(BasicApi::class.java)\n        }\n\n        private val trustAllCerts = arrayOf<TrustManager>(object : X509TrustManager {\n            override fun getAcceptedIssuers(): Array<X509Certificate> {\n                return arrayOf()\n            }\n\n            @Throws(CertificateException::class)\n            override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) {}\n\n            @Throws(CertificateException::class)\n            override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) {}\n        })\n\n        class RelaxedHostNameVerifier : HostnameVerifier {\n            override fun verify(hostname: String, session: SSLSession): Boolean {\n                return true\n            }\n        }\n\n        private var format = SimpleDateFormat(\"yyyyMMddHHmmssSSS\", Locale.KOREAN)\n        private var seqCode = 0\n\n\n        /**\n         * 요청 코드 생성\n         */\n        @Synchronized\n        fun generateRequestCode(): String {\n            seqCode += 1\n            if (seqCode > 999) {\n                seqCode = 1\n            }\n\n            var seqCodeStr = seqCode.toString()\n            if (seqCodeStr.length == 1) {\n                seqCodeStr = \"00$seqCodeStr\"\n            } else if (seqCodeStr.length == 2) {\n                seqCodeStr = \"0$seqCodeStr\"\n            }\n\n            val date = Date()\n            val dateStr = format.format(date)\n\n            return dateStr + seqCodeStr\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/api/BasicApi.kt b/app/src/main/java/com/lx/api/BasicApi.kt
--- a/app/src/main/java/com/lx/api/BasicApi.kt	(revision baccfdbebf5b5f9e2d3c0f17e2ead4567a767b78)
+++ b/app/src/main/java/com/lx/api/BasicApi.kt	(date 1667876177693)
@@ -170,7 +170,7 @@
         private const val PROTOCOL = "http"
 
         // 기본 URL
-        private const val BASE_URL = "http://172.168.10.33:8001/"
+        private const val BASE_URL = "http://192.168.0.2:8001/"
 
         // 헤더 속성
         private const val CLIENT_ID = ""
