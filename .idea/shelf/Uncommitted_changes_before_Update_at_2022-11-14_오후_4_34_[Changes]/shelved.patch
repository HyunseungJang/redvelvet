Index: app/src/main/java/com/lx/api/BasicApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.api\r\n\r\n\r\nimport android.util.Log\r\nimport com.lx.data.*\r\nimport okhttp3.Interceptor\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport retrofit2.Call\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport retrofit2.http.*\r\nimport java.lang.Exception\r\nimport java.security.SecureRandom\r\nimport java.security.cert.CertificateException\r\nimport java.security.cert.X509Certificate\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.net.ssl.*\r\nimport kotlin.collections.HashMap\r\n\r\n/**\r\n * 웹서버 요청/응답을 처리하기 위한 기본 API\r\n */\r\ninterface BasicApi {\r\n\r\n    /**\r\n     * member 멤버 DB\r\n     */\r\n\r\n    /**\r\n     * POST 방식으로 멤버 로그인 요청\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/memberRead\")\r\n    fun postMemberRead(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String,\r\n        @Field(\"pw\") pw: String\r\n    ): Call<MemberListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 멤버 회원가입 요청\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/memberAdd\")\r\n    fun memberAdd(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String,\r\n        @Field(\"pw\") pw: String,\r\n        @Field(\"name\") name: String,\r\n        @Field(\"birth\") birth: String,\r\n        @Field(\"gender\") gender: String,\r\n        @Field(\"phone\") phone: String,\r\n        @Field(\"agreep\") agreep: String,\r\n        @Field(\"agrees1\") agrees1: String,\r\n        @Field(\"agrees2\") agrees2: String\r\n    ): Call<MemberListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 회원가입시 위치정보추가\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/registerArea\")\r\n    fun memberArea(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String,\r\n        @Field(\"lat\") lat: Int,\r\n        @Field(\"lng\") lng: Int\r\n    ): Call<MemberAreaResponse>\r\n\r\n    /**\r\n     * POST 방식으로 위치정보 새로고침\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/myAreaUpdate\")\r\n    fun myAreaUpdate(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String,\r\n        @Field(\"lat\") lat: Double?,\r\n        @Field(\"lng\") lng: Double?\r\n    ): Call<MemberAreaResponse>\r\n\r\n    /**\r\n     * POST 방식으로 멤버 정보수정 요청\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/memberUpdate\")\r\n    fun memberUpdate(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String,\r\n        @Field(\"birth\") birth: String,\r\n        @Field(\"height\") height: String,\r\n        @Field(\"weight\") weight: String,\r\n        @Field(\"emernum\") emernum: String,\r\n        @Field(\"medicine\") medicine: String,\r\n        @Field(\"disease\") disease: String,\r\n        @Field(\"bloodtype\") bloodtype: String,\r\n        @Field(\"certificate\") certificate: String,\r\n        @Field(\"others\") others: String,\r\n    ): Call<MemberListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 아이디 중복체크 요청\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/memberIdcheck\")\r\n    fun postMemberCheckId(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String\r\n    ): Call<MemberListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 멤버 로그인 요청\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/dangerzone\")\r\n    fun dangerzone(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"LAT\") LAT: Double?,\r\n        @Field(\"LNG\") LNG: Double?,\r\n        @Field(\"LAT2\") LAT2: Double?\r\n    ): Call<DangerResponse>\r\n\r\n    /**\r\n     * 내위치에서 구조신호 보내기 + 구조신호 리스트 추가\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/sendMyAreaAdd\")\r\n    fun sendMyArea(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String,\r\n        @Field(\"lat\") lat: Double?,\r\n        @Field(\"lng\") lng: Double?\r\n    ): Call<SendMyAreaResponse>\r\n\r\n    /**\r\n     * 도움요청자 스캔하기\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/scanHelp\")\r\n    fun scanhelp(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String,\r\n        @Field(\"LAT\") LAT: Double?,\r\n        @Field(\"LNG\") LNG: Double?,\r\n        @Field(\"LAT2\") LAT2: Double?\r\n    ): Call<HelpResponse>\r\n\r\n\r\n    /**\r\n     * GET 방식으로 게시판 리스트 보기\r\n     */\r\n\r\n    @GET(\"red/communityList\")\r\n    fun getCommunityList(\r\n        @Query(\"requestCode\") requestCode: String\r\n    ): Call<CommunityResponse>\r\n\r\n\r\n    /**\r\n     * 게시판 추가\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/communityAdd\")\r\n    fun addPost(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String,\r\n        @Field(\"title\") title: String,\r\n        @Field(\"picture\") picture: String,\r\n        @Field(\"content\") content: String,\r\n        @Field(\"area\") area: String\r\n    ): Call<CommunityResponse>\r\n\r\n    /**\r\n     * 내위치에서 구조신호 보냈을때 리스트 추가\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"red/helpMyAreaAdd\")\r\n    fun help(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"id\") id: String,\r\n        @Field(\"LAT\") LAT: Double?,\r\n        @Field(\"LNG\") LNG: Double?\r\n    ): Call<HelpResponse>\r\n\r\n    /**\r\n     *  구조요청 완료 요청(송신자)\r\n     */\r\n\r\n    @GET(\"red/deleteHelp\")\r\n    fun getMemberDelete(\r\n        @Query(\"requestCode\") requestCode: String,\r\n        @Query(\"id\") id: String\r\n    ): Call<HelpResponse>\r\n\r\n\r\n    /**\r\n     * 파일 업로드 요청\r\n     */\r\n\r\n    @Multipart\r\n    @POST(\"red/communityUpload\")\r\n    fun communityUploadFile(\r\n        @Part file: MultipartBody.Part,\r\n        @Part(value=\"params\", encoding=\"UTF-8\") params: HashMap<String,String> = hashMapOf()\r\n    ): Call<FileUploadResponse>\r\n\r\n}\r\n\r\nclass BasicClient {\r\n\r\n    companion object {\r\n        const val TAG = \"BasicClient\"\r\n\r\n        private var instance : BasicApi? = null\r\n\r\n        val api: BasicApi\r\n            get() {\r\n                return getInstance()\r\n            }\r\n\r\n        @Synchronized\r\n        fun getInstance(): BasicApi {\r\n            if (instance == null)\r\n                instance = create()\r\n            return instance as BasicApi\r\n        }\r\n\r\n        // 프로토콜\r\n        private const val PROTOCOL = \"http\"\r\n\r\n        // 기본 URL\r\n        private const val BASE_URL = \"http://192.168.35.195:8001/\"\r\n\r\n        // 헤더 속성\r\n        private const val CLIENT_ID = \"\"\r\n        private const val CLIENT_SECRET = \"\"\r\n        var userId:String = \"\"\r\n\r\n        fun create(): BasicApi {\r\n            val httpLoggingInterceptor = HttpLoggingInterceptor()\r\n            httpLoggingInterceptor.level = HttpLoggingInterceptor.Level.BODY\r\n\r\n            val headerInterceptor = Interceptor {\r\n                val request = it.request()\r\n                    .newBuilder()\r\n                    .addHeader(\"X-Client-Id\", CLIENT_ID)\r\n                    .addHeader(\"X-Client-Secret\", CLIENT_SECRET)\r\n                    .addHeader(\"X-Client-UserId\", userId)\r\n                    .build()\r\n                return@Interceptor it.proceed(request)\r\n            }\r\n\r\n            val clientBuilder = OkHttpClient.Builder()\r\n\r\n            if (PROTOCOL == \"https\") {\r\n\r\n                val x509TrustManager: X509TrustManager = object : X509TrustManager {\r\n                    override fun getAcceptedIssuers(): Array<X509Certificate> {\r\n                        val x509Certificates = arrayOf<X509Certificate>()\r\n                        return x509Certificates\r\n                    }\r\n\r\n                    @Throws(CertificateException::class)\r\n                    override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) {\r\n                        Log.d(TAG, \": authType: $authType\")\r\n                    }\r\n\r\n                    @Throws(CertificateException::class)\r\n                    override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) {\r\n                        Log.d(TAG, \": authType: $authType\")\r\n                    }\r\n                }\r\n\r\n                try {\r\n                    val sslContext = SSLContext.getInstance(\"TLS\")\r\n                    sslContext.init(null, trustAllCerts, SecureRandom())\r\n                    val sslSocketFactory = sslContext.socketFactory\r\n                    clientBuilder.sslSocketFactory(sslSocketFactory, x509TrustManager)\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                }\r\n\r\n                clientBuilder.hostnameVerifier(RelaxedHostNameVerifier())\r\n\r\n            }\r\n\r\n            clientBuilder.addInterceptor(headerInterceptor)\r\n            clientBuilder.addInterceptor(httpLoggingInterceptor)\r\n            clientBuilder.callTimeout(60, TimeUnit.SECONDS)       // 호출 타임아웃 시간 설정 60초//\r\n            clientBuilder.connectTimeout(60, TimeUnit.SECONDS)    // 연결 타임아웃 시간 설정 60초\r\n            clientBuilder.readTimeout(60, TimeUnit.SECONDS)\r\n            clientBuilder.writeTimeout(60, TimeUnit.SECONDS)\r\n\r\n            val client = clientBuilder.build()\r\n\r\n            return Retrofit.Builder()\r\n                .baseUrl(BASE_URL)\r\n                .client(client)\r\n                .addConverterFactory(GsonConverterFactory.create())\r\n                .build()\r\n                .create(BasicApi::class.java)\r\n        }\r\n\r\n        private val trustAllCerts = arrayOf<TrustManager>(object : X509TrustManager {\r\n            override fun getAcceptedIssuers(): Array<X509Certificate> {\r\n                return arrayOf()\r\n            }\r\n\r\n            @Throws(CertificateException::class)\r\n            override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) {}\r\n\r\n            @Throws(CertificateException::class)\r\n            override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) {}\r\n        })\r\n\r\n        class RelaxedHostNameVerifier : HostnameVerifier {\r\n            override fun verify(hostname: String, session: SSLSession): Boolean {\r\n                return true\r\n            }\r\n        }\r\n\r\n        private var format = SimpleDateFormat(\"yyyyMMddHHmmssSSS\", Locale.KOREAN)\r\n        private var seqCode = 0\r\n\r\n\r\n        /**\r\n         * 요청 코드 생성\r\n         */\r\n        @Synchronized\r\n        fun generateRequestCode(): String {\r\n            seqCode += 1\r\n            if (seqCode > 999) {\r\n                seqCode = 1\r\n            }\r\n\r\n            var seqCodeStr = seqCode.toString()\r\n            if (seqCodeStr.length == 1) {\r\n                seqCodeStr = \"00$seqCodeStr\"\r\n            } else if (seqCodeStr.length == 2) {\r\n                seqCodeStr = \"0$seqCodeStr\"\r\n            }\r\n\r\n            val date = Date()\r\n            val dateStr = format.format(date)\r\n\r\n            return dateStr + seqCodeStr\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/api/BasicApi.kt b/app/src/main/java/com/lx/api/BasicApi.kt
--- a/app/src/main/java/com/lx/api/BasicApi.kt	(revision 852b53fca68d562378bdef18581c948ebd1af4df)
+++ b/app/src/main/java/com/lx/api/BasicApi.kt	(date 1668394119479)
@@ -153,9 +153,9 @@
     fun scanhelp(
         @Field("requestCode") requestCode: String,
         @Field("id") id: String,
-        @Field("LAT") LAT: Double?,
-        @Field("LNG") LNG: Double?,
-        @Field("LAT2") LAT2: Double?
+        @Field("lat") lat: Double?,
+        @Field("lng") lng: Double?,
+        @Field("lat2") lat2: Double?
     ): Call<HelpResponse>
 
 
@@ -244,7 +244,7 @@
         private const val PROTOCOL = "http"
 
         // 기본 URL
-        private const val BASE_URL = "http://192.168.35.195:8001/"
+        private const val BASE_URL = "http://172.168.10.63:8001/"
 
         // 헤더 속성
         private const val CLIENT_ID = ""
